"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

enum AdvisorSortEnum {
  CLIENTS
  JOBS_ADDED
  JOBS_SHARED
}

type AdvisorUsers {
  id: ID!
  jobsAdded: [UsersJobs!]!
  jobsShared: [UsersJobs!]!
  user: Users!
}

enum AuthProviderTypeEnum {
  GOOGLE
}

type AuthResponse {
  token: ID
  user: Users
}

type CachedStreamingType {
  isSync: Boolean!
  result: String!
}

type ClientGroup {
  clients: [ClientUsers!]!
  createdAt: ISO8601DateTime!
  createdByUser: Users!
  id: ID!
  name: String!
}

type ClientUsers {
  addedJobs: [UsersJobs!]!
  allJobs: [UsersJobs!]!
  appliedJobs: [UsersJobs!]!
  id: ID!
  interviewedJobs: [UsersJobs!]!
  numAddedJobs: Int!
  numAllJobs: Int!
  numAppliedJobs: Int!
  numInterviewedJobs: Int!
  numOfferedJobs: Int!
  numRejectedJobs: Int!
  offeredJobs: [UsersJobs!]!
  rejectedJobs: [UsersJobs!]!
  user: Users!
}

type Contacts {
  email: String
  id: ID!
  name: String
}

input ContactsInputObject {
  email: String!
  name: String!
}

enum CoverLetterLengthEnum {
  LONG
  MEDIUM
  SHORT
}

enum CoverLetterToneEnum {
  CASUAL
  EXCITED
  FORMAL
  INFORMATIONAL
}

type FieldMessageType {
  errorMessage: String
  field: String!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type Interview {
  createdAt: ISO8601DateTime!
  id: ID!
  interviewType: InterviewsTypeEnum!
  jobTitle: String!
  messages: [InterviewsMessage!]!
  score: Int
  status: InterviewsStatusEnum!
}

type InterviewsMessage {
  fromUser: Boolean!
  message: String!
}

enum InterviewsStatusEnum {
  CANCELLED
  FINISHED
  STARTED
}

enum InterviewsTypeEnum {
  INTRO_RECRUITER_SCREEN
  JOB_INTERVIEW_BEHAVIORAL_TECHNICAL
}

enum JobPostingSortEnum {
  CLIENTS_APPLIED
  CLIENTS_SHARED_WITH
}

"""Autogenerated return type of LearnSkills."""
type LearnSkillsPayload {
  content: String!
  i: Int
  initial: Boolean!
  requestId: String!
  usersJobId: ID!
}

type Mutation {
  addContactToUsersJob(contact: ContactsInputObject!, id: ID!): UsersJobs!
  addUsersToClientGroup(clientGroupId: ID!, userIds: [ID!]!): ClientGroup!
  assignClientToAdvisor(advisorId: ID!, clientIds: [ID!]!): String!
  authPasswordResetRequest(email: String!): String!
  authProviderAuthenticate(data: String!, firstName: String, lastName: String, provider: AuthProviderTypeEnum!, referredByUserUniqueId: ID, resumeUniqueId: ID): AuthResponse!
  authResetPassword(newPassword: String!, resetPasswordToken: String!): String!
  authSignIn(email: String!, password: String!): AuthResponse!
  authSignUp(email: String!, firstName: String, lastName: String, referredByUserUniqueId: ID, resumeUniqueId: ID): AuthResponse!
  billingPortalUrl: String!
  coverLetterBodyPrefillApplication(resumeId: ID!, usersJobId: ID!): String!
  coverLetterUpsert(attributes: UsersJobsCoverLetterInputObject!, usersJobId: ID!): UsersJobsCoverLetterType!
  createClientGroup(name: String!): ClientGroup!
  createFeedback(feedback: String!, subject: String): String!
  createResume(name: String!): Resumes!
  createResumeFromLinkedinUrl(linkedinProfileUrl: String!): Resumes!
  createResumeUnauthenticated(attributes: ResumesInputObject): Resumes!
  createUsersJob(applicationInstructions: String, companyName: String!, contact: ContactsInputObject, interviewStep: UsersJobsInterviewStepEnum, isRemote: Boolean, jobDetails: String, location: String, notes: String, payPeriod: UsersJobsPayPeriodEnum, position: String!, rejectedStage: UsersJobsRejectedStageEnum, resumeId: ID, salaryMax: Int, salaryMin: Int, status: UsersJobsStatusEnum, uniqueUrl: Boolean, url: String): UsersJobs!
  duplicateResume(id: ID!): Resumes!
  editClientGroup(clientGroupId: ID!, name: String, userIds: [ID!]): ClientGroup!
  exportUsersJobToCsv: String!
  fetchJobKeywords(usersJobId: ID!): [String!]!
  fetchMissingSkillsOfJobResume(resumeId: ID!, usersJobId: ID!): [String!]!
  generateCoverLetter(coverLetterLength: CoverLetterLengthEnum, coverLetterTone: CoverLetterToneEnum, resumeId: ID!, usersJobId: ID!): UsersJobsCoverLetterType!
  generateJobAchievement(indices: [Int!]!, keywords: [String!], workPositionId: ID!): [String!]!
  generateOneJobAchievement(index: Int!, keywords: [String!], workPositionId: ID!): String!
  generateProfessionalSummary(id: ID!, keywords: [String!], useExisting: Boolean!): String!
  interviewAddMessage(interviewId: String!, message: String!): Interview!
  interviewStartMock(interviewType: InterviewsTypeEnum!, jobDescription: String, jobTitle: String!, resumeId: ID, usersJobId: ID): Interview!
  learnSkills(usersJobId: ID!): CachedStreamingType!
  matchScore(resumeId: ID!, usersJobId: ID!): UsersJobsMatch!
  optimizeResumeForJob(keywords: [String!], resumeId: ID!, skills: [String!], usersJobId: ID!): Resumes!
  previewAuthResume(id: ID!, template: ResumesTemplateEnum!): String!
  previewResume(attributes: ResumesInputObject!, template: ResumesTemplateEnum!): String!
  questionPrefillApplication(question: String!, resumeId: ID!): String!
  salaryInsights(usersJobId: ID!): String!
  sampleInterviewQuestions(usersJobId: ID!): CachedStreamingType!
  scoreResume(id: ID!): ResumesScoreType!
  shareJobWithClients(clientGroupIds: [ID!]!, userIds: [ID!]!, usersJobId: ID!): UsersJobs!
  subscriptionsRedeemLtdPromoCode(promoCode: String!): Users!
  subscriptionsSessionCreate(plan: SubscriptionPlanEnum!): String!
  subscriptionsSessionFetch(sessionId: ID!): String!
  updateArchivedCoverLetter(archived: Boolean!, coverLetterId: ID!): UsersJobsCoverLetterType!
  updateArchivedResume(archived: Boolean!, id: ID!): Resumes!
  updateLastPageLoadedAt: Users!
  updateResume(attributes: ResumesInputObject!, id: ID!): Resumes!
  updateResumeUnauthenticated(attributes: ResumesInputObject!, id: ID!): Resumes!
  updateShowOriginalDocumentResume(id: ID!, showOriginalDocument: Boolean!): Resumes!
  updateTemplateResume(id: ID!, template: ResumesTemplateEnum!, templateColorEnum: ResumesTemplateColorEnum): Resumes!
  updateUser(attributes: UsersInputObject!): Users!
  updateUsersJob(applicationInstructions: String, archived: Boolean, companyName: String, id: ID!, interviewStep: UsersJobsInterviewStepEnum, isRemote: Boolean, jobDetails: String, location: String, notes: String, payPeriod: UsersJobsPayPeriodEnum, position: String, rejectedStage: UsersJobsRejectedStageEnum, resumeId: ID, salaryMax: Int, salaryMin: Int, status: UsersJobsStatusEnum, url: String): UsersJobs!
  uploadResume(id: ID, name: String!, uploadSignedId: ID!): Resumes!
  usedChromeExtension: String!
  userEmailVerify(emailVerificationCode: String!, firstName: String!, lastName: String!, password: String!): AuthResponse!
}

type PaginatedAdvisorUsers {
  data: [AdvisorUsers!]!
  pagination: Pagination!
}

type PaginatedClientUsers {
  data: [ClientUsers!]!
  pagination: Pagination!
}

type PaginatedUsersJobs {
  data: [UsersJobs!]!
  pagination: Pagination!
}

type Pagination {
  page: Int!
  pageSize: Int!
  totalCount: Int!
  totalPages: Int!
}

type Query {
  advisors(fromDate: ISO8601DateTime, page: Int, perPage: Int, role: UsersRoleEnum, searchTerm: String, sortBy: AdvisorSortEnum, sortByDirection: SortByDirectionEnum, toDate: ISO8601DateTime): PaginatedAdvisorUsers!
  client(clientId: ID!): Users!
  clientGroups(clientGroupIds: [ID!]): [ClientGroup!]!
  clientResumes(clientId: ID!, resumeIds: [ID!]): [Resumes!]!
  clientUsersJobs(archived: Boolean, clientId: ID!, partnerCreated: Boolean, searchTerm: String, usersJobIds: [ID!]): [UsersJobs!]!
  clients(advisorIds: [ID!], fromDate: ISO8601DateTime, page: Int, perPage: Int, searchTerm: String, toDate: ISO8601DateTime): PaginatedClientUsers!
  coverLetters(archived: Boolean, coverLetterIds: [ID!]): [UsersJobsCoverLetterType!]!
  emailVerifyAllowed(emailVerificationCode: String!): Users
  findUsersJobByInfo(companyName: String!, location: String, position: String!, url: String): UsersJobs
  findUsersJobByUrl(url: String!): UsersJobs
  interviews(interviewIds: [ID!]): [Interview!]!
  paginatedUsersJobs(archived: Boolean, page: Int, perPage: Int, searchTerm: String, sortBy: JobPostingSortEnum, sortByDirection: SortByDirectionEnum): PaginatedUsersJobs!
  resetPasswordAllowed(resetPasswordToken: String!): Boolean!
  resumeSimpleAnalysis(id: ID!): [FieldMessageType!]!
  resumeUnauthenticated(id: ID!): Resumes
  resumes(aiGenerated: Boolean, archived: Boolean, resumeIds: [ID!]): [Resumes!]!
  user: Users!
  usersJobs(archived: Boolean, partnerCreated: Boolean, searchTerm: String, usersJobIds: [ID!]): [UsersJobs!]!
}

enum ResumeDocumentType {
  DOC
  PDF
}

enum ResumeSortableSections {
  CERTIFICATIONS
  COURSEWORKS
  EDUCATIONS
  INVOLVEMENTS
  PROJECTS
  SKILLS
  WORK_EXPERIENCES
}

type Resumes {
  aiGenerated: Boolean!
  archived: Boolean!
  certifications: [ResumesCertification!]!
  courseworks: [ResumesCoursework!]!
  createdAt: ISO8601DateTime!
  documentType: ResumeDocumentType
  documentUrl: String
  educations: [ResumesEducation!]!
  email: String
  firstName: String
  groupedSkills: [ResumesGroupedSkill!]!
  hideCertifications: Boolean!
  hideCourseworks: Boolean!
  hideEducations: Boolean!
  hideInvolvements: Boolean!
  hideProjects: Boolean!
  hideSkills: Boolean!
  hideSummary: Boolean!
  hideWorkExperiences: Boolean!
  id: ID!
  interviewRate: Int
  involvements: [ResumesInvolvement!]!
  lastName: String
  linkedinUrl: String
  location: String
  mostRecentEmployer: String
  name: String!
  phoneNumber: String
  professionalSummary: String
  projects: [ResumesProject!]!
  sectionsOrder: [ResumeSortableSections!]!
  showOriginalDocument: Boolean!
  simpleAnalysis: [FieldMessageType!]!
  suggestedSkills: [String!]!
  template: ResumesTemplateEnum!
  templateColorEnum: ResumesTemplateColorEnum
  uniqueId: ID
  updatedAt: ISO8601DateTime!
  website: String
  workExperiences: [ResumesWorkExperience!]!
}

type ResumesCertification {
  completionDate: ISO8601DateTime
  id: ID!
  name: String!
  provider: String
}

input ResumesCertificationInputObject {
  completionDate: ISO8601DateTime
  id: ID
  name: String!
  provider: String
}

type ResumesCoursework {
  achievements: [String!]!
  currentlyWorkingOnCourse: Boolean!
  endDate: ISO8601DateTime
  id: ID!
  institutionName: String
  name: String
}

input ResumesCourseworkInputObject {
  achievements: [String!]!
  currentlyWorkingOnCourse: Boolean
  endDate: ISO8601DateTime
  id: ID
  institutionName: String
  name: String
}

type ResumesEducation {
  additionalInformation: String
  currentlyInEducation: Boolean!
  degree: String
  endDate: ISO8601DateTime
  gpa: String
  id: ID!
  institutionName: String!
  location: String
  startDate: ISO8601DateTime
}

input ResumesEducationInputObject {
  additionalInformation: String
  currentlyInEducation: Boolean
  degree: String
  endDate: ISO8601DateTime
  gpa: String
  id: ID
  institutionName: String!
  location: String
  startDate: ISO8601DateTime
}

type ResumesGroupedSkill {
  category: String
  id: ID!
  skills: [String!]!
}

input ResumesGroupedSkillInputObject {
  category: String
  id: ID
  skills: [String!]!
}

input ResumesInputObject {
  certificationsAttributes: [ResumesCertificationInputObject!]!
  courseworksAttributes: [ResumesCourseworkInputObject!]!
  educationsAttributes: [ResumesEducationInputObject!]!
  email: String
  firstName: String
  groupedSkillsAttributes: [ResumesGroupedSkillInputObject!]!
  hideCertifications: Boolean
  hideCourseworks: Boolean
  hideEducations: Boolean
  hideInvolvements: Boolean
  hideProjects: Boolean
  hideSkills: Boolean
  hideSummary: Boolean
  hideWorkExperiences: Boolean
  involvementsAttributes: [ResumesInvolvementInputObject!]!
  lastName: String
  linkedinUrl: String
  location: String
  name: String
  phoneNumber: String
  professionalSummary: String
  projectsAttributes: [ResumesProjectInputObject!]!
  sectionsOrder: [ResumeSortableSections!]
  website: String
  workExperiencesAttributes: [ResumesWorkExperienceInputObject!]!
}

type ResumesInvolvement {
  achievements: [String!]!
  currentlyWorkingOnInvolvement: Boolean!
  endDate: ISO8601DateTime
  id: ID!
  name: String
  organizationName: String
  startDate: ISO8601DateTime
}

input ResumesInvolvementInputObject {
  achievements: [String!]!
  currentlyWorkingOnInvolvement: Boolean
  endDate: ISO8601DateTime
  id: ID
  name: String
  organizationName: String
  startDate: ISO8601DateTime
}

type ResumesProject {
  achievements: [String!]!
  currentlyWorkingOnProject: Boolean!
  endDate: ISO8601DateTime
  id: ID!
  name: String!
  startDate: ISO8601DateTime
}

input ResumesProjectInputObject {
  achievements: [String!]!
  currentlyWorkingOnProject: Boolean
  endDate: ISO8601DateTime
  id: ID
  name: String!
  startDate: ISO8601DateTime
}

type ResumesScoreFieldTagType {
  tagName: String!
}

type ResumesScoreFieldType {
  didPass: Boolean!
  errorMessage: String
  header: String!
  tags: [ResumesScoreFieldTagType!]
}

type ResumesScoreType {
  failed: Int!
  passed: Int!
  score: Int!
  scoreFields: [ResumesScoreFieldType!]!
  total: Int!
}

enum ResumesTemplateColorEnum {
  BAUHAUS_LIGHT
  HARVARD_LIGHT
  NEUE_CYAN
  NEUE_EMERALD
  NEUE_INDIGO
  NEUE_LIGHT
  OXFORD_CYAN
  OXFORD_EMERALD
  OXFORD_INDIGO
  OXFORD_LIGHT
}

enum ResumesTemplateEnum {
  BAUHAUS
  HARVARD
  NEUE
  OXFORD
}

type ResumesWorkExperience {
  companyDescription: String
  companyName: String!
  id: ID!
  simpleAnalysis: [FieldMessageType!]!
  workPositions: [ResumesWorkPosition!]!
}

input ResumesWorkExperienceInputObject {
  companyDescription: String
  companyName: String!
  id: ID
  workPositionsAttributes: [ResumesWorkPositionInputObject!]!
}

type ResumesWorkPosition {
  achievements: [String!]!
  currentlyInPosition: Boolean!
  endDate: ISO8601DateTime
  id: ID!
  location: String
  name: String!
  simpleAnalysis: [FieldMessageType!]!
  startDate: ISO8601DateTime
}

input ResumesWorkPositionInputObject {
  achievements: [String!]!
  currentlyInPosition: Boolean
  endDate: ISO8601DateTime
  id: ID
  location: String
  name: String!
  startDate: ISO8601DateTime
}

"""Autogenerated return type of SampleInterviewQuestions."""
type SampleInterviewQuestionsPayload {
  content: String!
  i: Int
  initial: Boolean!
  requestId: String!
  usersJobId: ID!
}

enum SortByDirectionEnum {
  ASC
  DESC
}

"""The subscription root for the GraphQL schema"""
type Subscription {
  learnSkills: LearnSkillsPayload!
  sampleInterviewQuestions: SampleInterviewQuestionsPayload!
}

enum SubscriptionPlanEnum {
  FREE
  PRO
  PRO_QUARTERLY
}

type Users {
  activeResumes: [Resumes!]
  advisor: Users
  completedAllChecklistItems: Boolean!
  email: String!
  firstName: String
  hasSubscription: Boolean!
  id: ID!
  isAdvisoryClient: Boolean!
  isAdvisoryOrgAccount: Boolean!
  lastActiveAt: ISO8601DateTime
  lastJobUpdatedAt: ISO8601DateTime
  lastName: String
  linkedinUrl: String
  location: String
  numClients: Int!
  numJobs: Int!
  numOwnClients: Int!
  numStartedInterviews: Int!
  numUploadedResumes: Int!
  phoneNumber: String
  plan: SubscriptionPlanEnum!
  referralTokens: Int!
  role: UsersRoleEnum!
  tokenAchievements: Int!
  tokenCoverLetter: Int!
  tokenInterview: Int!
  tokenInterviewQuestions: Int!
  tokenJobMatch: Int!
  tokenLearnSkills: Int!
  tokenProfessionalSummary: Int!
  tokenSalaryInsights: Int!
  uniqueId: String!
  usedChromeExtension: Boolean!
  usedJobAiFeature: Boolean!
  usedResumeAiFeature: Boolean!
  usersJobs: [UsersJobs!]!
  verified: Boolean!
  website: String
}

input UsersInputObject {
  firstName: String
  lastName: String
  linkedinUrl: String
  location: String
  phoneNumber: String
  website: String
}

type UsersJobs {
  applicationInstructions: String
  appliedAt: ISO8601DateTime
  archived: Boolean!
  clientsShared: [Users!]!
  companyName: String!
  contacts: [Contacts!]
  coverLetter: UsersJobsCoverLetterType
  createdAt: ISO8601DateTime!
  id: ID!
  interviewStep: UsersJobsInterviewStepEnum
  interviewedAt: ISO8601DateTime
  isRemote: Boolean
  jobDetails: String
  location: String
  notes: String
  numClientsApplied: Int!
  numClientsShared: Int!
  offerAt: ISO8601DateTime
  partnerArchived: Boolean!
  partnerCreatedByUser: Users
  payPeriod: UsersJobsPayPeriodEnum!
  position: String!
  rejectedAt: ISO8601DateTime
  rejectedStage: UsersJobsRejectedStageEnum
  resume: Resumes
  salaryMax: Int
  salaryMin: Int
  status: UsersJobsStatusEnum!
  updatedAt: ISO8601DateTime!
  url: String
}

input UsersJobsCoverLetterInputObject {
  body: String
  candidateAddress: String
  companyLocation: String
  companyName: String
  email: String
  firstName: String
  footer: String
  lastName: String
  phoneNumber: String
}

type UsersJobsCoverLetterType {
  archived: Boolean!
  body: String
  candidateAddress: String
  companyLocation: String
  companyName: String
  createdAt: ISO8601DateTime!
  email: String
  firstName: String
  footer: String
  id: ID!
  lastName: String
  mostRecentUsedResumeForGenerate: Resumes
  phoneNumber: String
  usersJob: UsersJobs!
}

enum UsersJobsInterviewStepEnum {
  INTRO_SCREEN
  ONSITE
  PHONE_SCREEN
}

type UsersJobsMatch {
  hardSkills: [String!]!
  matchLevel: UsersJobsMatchEnum!
  matches: [FieldMessageType!]!
}

enum UsersJobsMatchEnum {
  HIGH
  LOW
  MEDIUM
}

enum UsersJobsPayPeriodEnum {
  HOURLY
  MONTHLY
  WEEKLY
  YEARLY
}

enum UsersJobsRejectedStageEnum {
  APPLICATION
  INTERVIEW
  REFERENCE
}

enum UsersJobsStatusEnum {
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
  WISHLIST
}

enum UsersRoleEnum {
  ACCOUNT_MANAGER
  ADMIN
  ADVISOR
  JOBSEEKER
}